------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;--------------------------------------------------------
      4  10000 ????						; Include files
      5  10000 ????						;--------------------------------------------------------
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE bomber.asm
      9  0000 ????
     10  0000 ????
     11  0000 ????						;--------------------------------------------------------
     12  0000 ????						; Define RAM
     13  0000 ????						;--------------------------------------------------------
     14  0000 ????
     15 U008c ????				      seg.u	variables
     16 U0080					      org	$80
     17 U0080
     18 U0080		       00	   JetXPos    ds	1
     19 U0081		       00	   JetYPos    ds	1
     20 U0082		       00	   BomberXPos ds	1
     21 U0083		       00	   BomberYPos ds	1
     22 U0084		       00 00	   JetSpritePtr ds	2
     23 U0086		       00 00	   JetColorPtr ds	2
     24 U0088		       00 00	   BomberSpritePtr ds	2
     25 U008a		       00 00	   BomberColorPtr ds	2
     26 U008c
     27 U008c							;--------------------------------------------------------
     28 U008c							; Start of ROM
     29 U008c							;--------------------------------------------------------
     30 U008c
     31  10000 ????				       seg	rom
     32  f000					      org	$F000
     33  f000
     34  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     36  f00a
     37  f00a							;--------------------------------------------------------
     38  f00a							; Initialize registers/vars/ptrs/constants
     39  f00a							;--------------------------------------------------------
     40  f00a
     41  f00a		       a9 0a		      lda	#10	; set jet Y position
     42  f00c		       85 81		      sta	JetYPos
     43  f00e
     44  f00e		       a9 3c		      lda	#60	; set jet X position
     45  f010		       85 80		      sta	JetXPos
     46  f012
     47  f012		       a9 53		      lda	#83	; set bomber Y position
     48  f014		       85 83		      sta	BomberYPos
     49  f016
     50  f016		       a9 50		      lda	#80	; set bomber X position
     51  f018		       85 82		      sta	BomberXPos
     52  f01a
     53  f01a		       a9 84		      lda	#$84	; set background color
     54  f01c		       85 09		      sta	COLUBK
     55  f01e
     56  f01e		       a9 c2		      lda	#$C2	; set playfield color
     57  f020		       85 08		      sta	COLUPF
     58  f022
     59  f022		       a9 f0		      lda	#$F0	; set plafield blocks
     60  f024		       85 0d		      sta	PF0
     61  f026		       a9 fc		      lda	#$FC
     62  f028		       85 0e		      sta	PF1
     63  f02a		       a9 00		      lda	#$00
     64  f02c		       85 0f		      sta	PF2
     65  f02e
     66  f02e		       a9 01		      lda	#$01	; mirror playfield
     67  f030		       85 0a		      sta	CTRLPF
     68  f032
     69  f032		       a9 d7		      lda	#<JetSprite	; store jet sprite address
     70  f034		       85 84		      sta	JetSpritePtr
     71  f036		       a9 f0		      lda	#>JetSprite
     72  f038		       85 85		      sta	JetSpritePtr+1
     73  f03a
     74  f03a		       a9 f2		      lda	#<JetColor	; store jet sprite address
     75  f03c		       85 86		      sta	JetColorPtr
     76  f03e		       a9 f0		      lda	#>JetColor
     77  f040		       85 87		      sta	JetColorPtr+1
     78  f042
     79  f042		       a9 e9		      lda	#<BomberSprite	; store jet sprite address
     80  f044		       85 88		      sta	BomberSpritePtr
     81  f046		       a9 f0		      lda	#>BomberSprite
     82  f048		       85 89		      sta	BomberSpritePtr+1
     83  f04a
     84  f04a		       a9 04		      lda	#<BomberColor	; store jet sprite address
     85  f04c		       85 8a		      sta	BomberColorPtr
     86  f04e		       a9 f1		      lda	#>BomberColor
     87  f050		       85 8b		      sta	BomberColorPtr+1
     88  f052
     89  f052		       00 09	   JET_HEIGHT =	9
     90  f052		       00 09	   BOMBER_HEIGHT =	9
     91  f052
     92  f052							;--------------------------------------------------------
     93  f052							; Start next frame
     94  f052							;--------------------------------------------------------
     95  f052
     96  f052				   NextFrame
     97  f052		       a9 02		      lda	#$02
     98  f054		       85 01		      sta	VBLANK	; turn on VBLANK
     99  f056		       85 00		      sta	VSYNC	; turn on VSYNC
    100  f058
    101  f058							;--------------------------------------------------------
    102  f058							; VSYNC
    103  f058							;--------------------------------------------------------
    104  f058
    105  f058		       85 02		      sta	WSYNC
    106  f05a		       85 02		      sta	WSYNC
    107  f05c		       85 02		      sta	WSYNC
    108  f05e
    109  f05e		       a9 00		      lda	#$00
    110  f060		       85 00		      sta	VSYNC	; turn off VSYNC
    111  f062
    112  f062							;--------------------------------------------------------
    113  f062							; Housekeeping (in VBLANK)
    114  f062							;--------------------------------------------------------
    115  f062
    116  f062		       a5 80		      lda	JetXPos	; set jet horizontal position
    117  f064		       a2 00		      ldx	#0
    118  f066		       20 be f0 	      jsr	SetObjectXPos
    119  f069
    120  f069		       a5 82		      lda	BomberXPos	; set bomber horizontal position
    121  f06b		       a2 01		      ldx	#1
    122  f06d		       20 be f0 	      jsr	SetObjectXPos
    123  f070
    124  f070		       85 02		      sta	WSYNC	; 'carriage return'
    125  f072		       85 2a		      sta	HMOVE	; perform fine-tune offset
    126  f074
    127  f074							; uses 5 scanlines
    128  f074
    129  f074							;--------------------------------------------------------
    130  f074							; VBLANK
    131  f074							;--------------------------------------------------------
    132  f074
    133  f074		       a2 20		      ldx	#32
    134  f076				   LoopVBlank
    135  f076		       ca		      dex
    136  f077		       85 02		      sta	WSYNC
    137  f079		       d0 fb		      bne	LoopVBlank
    138  f07b
    139  f07b		       a9 00		      lda	#$0
    140  f07d		       85 01		      sta	VBLANK	; turn off VBLANK
    141  f07f
    142  f07f							;--------------------------------------------------------
    143  f07f							; Kernel
    144  f07f							;--------------------------------------------------------
    145  f07f
    146  f07f		       a2 5f		      ldx	#95
    147  f081				   KernelLoop
    148  f081
    149  f081		       8a		      txa		; draw jet sprite
    150  f082		       38		      sec
    151  f083		       e5 81		      sbc	JetYPos
    152  f085		       c5 09		      cmp	JET_HEIGHT
    153  f087		       90 02		      bcc	DrawSpriteP0
    154  f089		       a9 00		      lda	#0
    155  f08b				   DrawSpriteP0
    156  f08b		       a8		      tay
    157  f08c		       b1 84		      lda	(JetSpritePtr),Y
    158  f08e		       85 1b		      sta	GRP0
    159  f090		       b1 86		      lda	(JetColorPtr),Y
    160  f092		       85 06		      sta	COLUP0
    161  f094		       85 02		      sta	WSYNC
    162  f096
    163  f096		       8a		      txa		; draw jet sprite
    164  f097		       38		      sec
    165  f098		       e5 83		      sbc	BomberYPos
    166  f09a		       c5 09		      cmp	BOMBER_HEIGHT
    167  f09c		       90 02		      bcc	DrawSpriteP1
    168  f09e		       a9 00		      lda	#0
    169  f0a0				   DrawSpriteP1
    170  f0a0		       a8		      tay
    171  f0a1		       b1 88		      lda	(BomberSpritePtr),Y
    172  f0a3		       85 1c		      sta	GRP1
    173  f0a5		       b1 8a		      lda	(BomberColorPtr),Y
    174  f0a7		       85 07		      sta	COLUP1
    175  f0a9							;sta WSYNC
    176  f0a9
    177  f0a9		       ca		      dex
    178  f0aa		       e0 ff		      cpx	#$ff
    179  f0ac		       85 02		      sta	WSYNC	; (STA doesn't affect flags, so safe to use here)
    180  f0ae		       d0 d1		      bne	KernelLoop
    181  f0b0
    182  f0b0
    183  f0b0
    184  f0b0							;--------------------------------------------------------
    185  f0b0							; Overscan
    186  f0b0							;--------------------------------------------------------
    187  f0b0
    188  f0b0		       a9 02		      lda	#$02	; turn on VBLANK
    189  f0b2		       85 01		      sta	VBLANK
    190  f0b4
    191  f0b4		       a2 1e		      ldx	#30
    192  f0b6				   LoopOverscan
    193  f0b6		       ca		      dex
    194  f0b7		       85 02		      sta	WSYNC
    195  f0b9		       d0 fb		      bne	LoopOverscan
    196  f0bb
    197  f0bb		       4c 52 f0 	      jmp	NextFrame
    198  f0be
    199  f0be							;--------------------------------------------------------
    200  f0be							; Subroutines
    201  f0be							;--------------------------------------------------------
    202  f0be
    203  f0be				   SetObjectXPos subroutine
    204  f0be		       e0 02		      cpx	#2	; carry flag for ball/missile
    205  f0c0		       69 00		      adc	#0	; add 1 to account for different timings
    206  f0c2		       38		      sec		; set carry
    207  f0c3		       85 02		      sta	WSYNC	; 'carriage return'
    208  f0c5
    209  f0c5				   .DivideLoop
    210  f0c5		       e9 0f		      sbc	#15
    211  f0c7		       b0 fc		      bcs	.DivideLoop
    212  f0c9
    213  f0c9		       49 07		      eor	#7
    214  f0cb		       0a		      asl
    215  f0cc		       0a		      asl
    216  f0cd		       0a		      asl
    217  f0ce		       0a		      asl
    218  f0cf		       9d 20 00 	      sta.a	HMP0,X	; force absolute addressing for timing!
    219  f0d2		       95 10		      sta	RESP0,X
    220  f0d4		       85 02		      sta	WSYNC
    221  f0d6		       60		      rts
    222  f0d7
    223  f0d7							;--------------------------------------------------------
    224  f0d7							; Lookup tables
    225  f0d7							;--------------------------------------------------------
    226  f0d7
    227  f0d7				   JetSprite
    228  f0d7		       00		      .byte.b	#%00000000	;
    229  f0d8		       14		      .byte.b	#%00010100	;   # #
    230  f0d9		       7f		      .byte.b	#%01111111	; #######
    231  f0da		       3e		      .byte.b	#%00111110	;  #####
    232  f0db		       1c		      .byte.b	#%00011100	;   ###
    233  f0dc		       1c		      .byte.b	#%00011100	;   ###
    234  f0dd		       08		      .byte.b	#%00001000	;    #
    235  f0de		       08		      .byte.b	#%00001000	;    #
    236  f0df		       08		      .byte.b	#%00001000	;    #
    237  f0e0
    238  f0e0				   JetSpriteTurn
    239  f0e0		       00		      .byte.b	#%00000000	;
    240  f0e1		       08		      .byte.b	#%00001000	;    #
    241  f0e2		       3e		      .byte.b	#%00111110	;  #####
    242  f0e3		       1c		      .byte.b	#%00011100	;   ###
    243  f0e4		       1c		      .byte.b	#%00011100	;   ###
    244  f0e5		       1c		      .byte.b	#%00011100	;   ###
    245  f0e6		       08		      .byte.b	#%00001000	;    #
    246  f0e7		       08		      .byte.b	#%00001000	;    #
    247  f0e8		       08		      .byte.b	#%00001000	;    #
    248  f0e9
    249  f0e9				   BomberSprite
    250  f0e9		       00		      .byte.b	#%00000000	;
    251  f0ea		       08		      .byte.b	#%00001000	;    #
    252  f0eb		       08		      .byte.b	#%00001000	;    #
    253  f0ec		       2a		      .byte.b	#%00101010	;  # # #
    254  f0ed		       3e		      .byte.b	#%00111110	;  #####
    255  f0ee		       7f		      .byte.b	#%01111111	; #######
    256  f0ef		       2a		      .byte.b	#%00101010	;  # # #
    257  f0f0		       08		      .byte.b	#%00001000	;    #
    258  f0f1		       1c		      .byte.b	#%00011100	;   ###
    259  f0f2
    260  f0f2				   JetColor
    261  f0f2		       00		      .byte.b	#$00
    262  f0f3		       fe		      .byte.b	#$FE
    263  f0f4		       0c		      .byte.b	#$0C
    264  f0f5		       0e		      .byte.b	#$0E
    265  f0f6		       0e		      .byte.b	#$0E
    266  f0f7		       04		      .byte.b	#$04
    267  f0f8		       ba		      .byte.b	#$BA
    268  f0f9		       0e		      .byte.b	#$0E
    269  f0fa		       08		      .byte.b	#$08
    270  f0fb
    271  f0fb				   JetColorTurn
    272  f0fb		       00		      .byte.b	#$00
    273  f0fc		       fe		      .byte.b	#$FE
    274  f0fd		       0c		      .byte.b	#$0C
    275  f0fe		       0e		      .byte.b	#$0E
    276  f0ff		       0e		      .byte.b	#$0E
    277  f100		       04		      .byte.b	#$04
    278  f101		       0e		      .byte.b	#$0E
    279  f102		       0e		      .byte.b	#$0E
    280  f103		       08		      .byte.b	#$08
    281  f104
    282  f104				   BomberColor
    283  f104		       00		      .byte.b	#$00
    284  f105		       32		      .byte.b	#$32
    285  f106		       32		      .byte.b	#$32
    286  f107		       0e		      .byte.b	#$0E
    287  f108		       40		      .byte.b	#$40
    288  f109		       40		      .byte.b	#$40
    289  f10a		       40		      .byte.b	#$40
    290  f10b		       40		      .byte.b	#$40
    291  f10c
    292  f10c							;--------------------------------------------------------
    293  f10c							; End of ROM
    294  f10c							;--------------------------------------------------------
    295  f10c
    296  fffc					      org	$FFFC
    297  fffc		       00 f0		      .word.w	Start
    298  fffe		       00 f0		      .word.w	Start
